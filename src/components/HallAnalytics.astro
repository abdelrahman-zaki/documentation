---
// Client-side Hall Analytics Component
// This works with static hosting like AWS Amplify
const HALL_API_KEY = import.meta.env.HALL_API_KEY;
---

<script define:vars={{ apiKey: HALL_API_KEY || '' }}>
    // Hall Analytics Client-Side Tracking
    (function() {
      'use strict';
      
      const HALL_API_KEY = apiKey;
      
      if (!HALL_API_KEY) {
        return;
      }

      // Track page view when component loads
      function trackPageView() {
        const path = window.location.pathname + window.location.search;
        const method = 'GET';
        const timestamp = Date.now();
        
        // Get IP from headers (will be client IP)
        const requestHeaders = {
          'User-Agent': navigator.userAgent,
          'Host': window.location.host,
          'Referer': document.referrer,
          'Accept-Language': navigator.language,
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Sec-Ch-Ua': navigator.userAgent.includes('Chrome') ? '"Not_A Brand";v="8", "Chromium";v="120"' : '',
          'Sec-Ch-Ua-Mobile': /Mobile|Android|iPhone|iPad/.test(navigator.userAgent) ? '?1' : '?0',
          'Sec-Ch-Ua-Platform': `"${navigator.platform}"`
        };

        const analyticsData = {
          request_path: path,
          request_method: method,
          request_ip: '127.0.0.1', // Client-side can't get real IP
          request_headers: requestHeaders,
          request_timestamp: timestamp
        };

        // Send to Hall Analytics
        fetch('https://analytics.usehall.com/visit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${HALL_API_KEY}`,
          },
          body: JSON.stringify(analyticsData),
        })
        .then(response => {
          if (!response.ok) {
            console.error('[Hall Analytics] Failed to track:', response.status);
          }
        })
        .catch(error => {
          console.error('[Hall Analytics] Network error:', error);
        });
      }

      // Track initial page load
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', trackPageView);
      } else {
        trackPageView();
      }

      // Also track when body becomes available (fallback)
      if (!document.body) {
        const bodyObserver = new MutationObserver(() => {
          if (document.body) {
            bodyObserver.disconnect();
            trackPageView();
          }
        });
        bodyObserver.observe(document.documentElement, {
          childList: true,
          subtree: true
        });
      }

      // Track navigation (for SPA-like behavior) - only if document.body exists
      if (document.body) {
        let currentPath = window.location.pathname;
        const observer = new MutationObserver(() => {
          if (window.location.pathname !== currentPath) {
            currentPath = window.location.pathname;
            setTimeout(trackPageView, 100); // Small delay to ensure new page is loaded
          }
        });

        observer.observe(document.body, {
          childList: true,
          subtree: true
        });
      }

    })();
  </script> 